---
- name: Perform a base backup
  become_user: postgres
  environment:
    PGSSLMODE: verify-ca
    PGSSLROOTCERT: /etc/xroad/postgresql/ca.crt
    PGSSLCERT: /etc/xroad/postgresql/server.crt
    PGSSLKEY: /etc/xroad/postgresql/server.key
  shell: |
    cd "{{ postgresql_data_dir }}"
    rm -rf *
    pg_basebackup -h "{{ master_host }}" -p "{{ serverconf_db_port }}" -U "{{ nodename }}" -D .
  args:
    chdir: "{{ postgresql_data_dir }}"
    creates: "{{ postgresql_data_dir }}/standby.signal"

- name: Configure slave database
  lineinfile:
    dest: "{{ postgresql_config_dir }}/postgresql.conf"
    regexp: "^\\s*#?{{ item.option }}\\s*="
    line: "{{ item.option }} = {{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items:
    - { option: 'ssl', value: 'on' }
    - { option: 'ssl_ca_file', value: "'/etc/xroad/postgresql/ca.crt'" }
    - { option: 'ssl_cert_file', value: "'/etc/xroad/postgresql/server.crt'" }
    - { option: 'ssl_key_file', value: "'/etc/xroad/postgresql/server.key'" }
    - { option: 'listen_addresses', value: "'localhost'" }
    - { option: 'wal_level', value: "'replica'" }
    - { option: 'max_wal_senders', value: '10' }
    - { option: 'wal_keep_segments', value: '8' }

- name: Enable replication connections
  lineinfile:
    dest: "{{ postgresql_config_dir }}/pg_hba.conf"
    regexp: "^\\s*hostssl\\s+replication\\s+\\+slavenode\\s+samenet\\s+cert"
    line: "hostssl replication +slavenode samenet cert"

- name: Enable PostgreSQL service
  service:
    name: "{{ postgresql_serverconf_service }}"
    enabled: yes
    state: started
  register: postgresql_service_status
  failed_when: postgresql_service_status.state != "started"

- name: Debug PostgreSQL service status
  debug:
    msg: "{{ postgresql_service_status }}"

- name: Check service status on failure
  command: systemctl status {{ postgresql_serverconf_service }}
  register: service_status
  when: postgresql_service_status.state != "started"

- name: Show journal logs on failure
  command: journalctl -xe
  register: journal_logs
  when: postgresql_service_status.state != "started"

- name: Debug service status and logs
  debug:
    msg: "{{ service_status.stdout }} {{ journal_logs.stdout }}"
  when: postgresql_service_status.state != "started"
